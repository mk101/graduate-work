version: '3.8'

services:
  database:
    image: postgres:latest
    container_name: database
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: mapping_service
    volumes:
      - database:/var/lib/postgresql/data
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis:/root/redis
    environment:
      REDIS_PASSWORD: redis

  nginx:
    image: nginx:latest
    container_name: nginx
    environment:
      - TZ="Europe/Moscow"
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_storage:/data
    environment:
      MINIO_ROOT_USER: root
      MINIO_ROOT_PASSWORD: rootrootroot
    command: server --console-address ":9001" /data

  # ELK
  elasticsearch:
    image: elasticsearch:8.12.2
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data/
      - ./elk-config/elasticsearch/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=0.0.0.0
      - xpack.security.enabled=false
      - xpack.monitoring.collection.enabled=false
      - cluster.name=elasticsearch
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
    healthcheck:
      test: curl -s http://elasticsearch:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 10
    mem_limit: 4g
  logstash:
    image: logstash:8.12.2
    container_name: logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./elk-config/logstash/postgresql.jar:/opt/drivers/postgresql.jar
      - ./elk-config/logstash/logs.conf:/usr/share/logstash/pipeline/logs.conf
      - ./elk-config/logstash/pg.conf:/usr/share/logstash/pipeline/pg.conf
      - ./elk-config/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./elk-config/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml
      - logstash_data:/usr/share/logstash/data
      - ./logs:/app/logs
    depends_on:
      elasticsearch:
        condition: service_healthy
  kibana:
    image: kibana:8.12.2
    container_name: kibana
    ports:
      - "5601:5601"
    volumes:
      - ./elk-config/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml
      - kibana_data:/usr/share/kibana/data
    depends_on:
      elasticsearch:
        condition: service_healthy

  # Backend
  auth-service:
    build: auth-service/
    container_name: auth-service
    ports:
      - "81:8080"
      - "5006:5005"
    environment:
      DB_HOST: database
      DB_PORT: 5432
      DB_DATABASE: mapping_service
      DB_USER: postgres
      DB_PASSWORD: postgres
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis
      ACCESS_TTL: 600
      REFRESH_TTL: 864000
    depends_on:
      - database
      - redis
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
  user-service:
    build: user-service/
    container_name: user-service
    ports:
      - "82:8080"
      - "5007:5005"
    environment:
      AUTH_SERVICE_HOST: auth-service
      AUTH_SERVICE_PATH: auth
      AUTH_SERVICE_PORT: 8080
      DB_HOST: database
      DB_PORT: 5432
      DB_DATABASE: mapping_service
      DB_USER: postgres
      DB_PASSWORD: postgres
      MINIO_HOST: minio
      MINIO_LOGIN: root
      MINIO_PASSWORD: rootrootroot
      MINIO_PORT: 9000
      MINIO_BUCKET_NAME: avatars
    depends_on:
      auth-service:
        condition: service_healthy
      minio:
        condition: service_started
      database:
        condition: service_started
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5

volumes:
  database: {}
  redis: {}
  minio_storage: {}
  elasticsearch_data: {}
  logstash_data: {}
  kibana_data: {}
  filebeat_data: {}